To use StructureMap as your dependency injection container,
add the following files in the specified directories.
All destination paths are relative to the root of the ASP.NET MVC web site.


/Shared/IDependencyInjectionContainer.cs => /DI/IDependencyInjectionContainer.cs
/Shared/InjectableControllerFactory.cs => /DI/InjectableControllerFactory.cs
/Shared/MvcSiteMapProviderConfig.cs => /App_Start/MvcSiteMapProviderConfig.cs
/StructureMap/DIConfig.cs => /App_Start/DIConfig.cs
/StructureMap/StructureMapContainer.cs => /DI/StructureMap/StructureMapContainer.cs
/StructureMap/Conventions/SingletonConvention.cs => /DI/StructureMap/Conventions/SingletonConvention.cs
/StructureMap/Conventions/TransientConvention.cs => /DI/StructureMap/Conventions/TransientConvention.cs
/StructureMap/Registries/MvcControllerFactoryRegistry.cs => /DI/StructureMap/Registries/MvcControllerFactoryRegistry.cs
/StructureMap/Registries/MvcSiteMapProviderRegistry.cs => /DI/StructureMap/Registries/MvcSiteMapProviderRegistry.cs
/StructureMap/Registries/StructureMapRegistry.cs => /DI/StructureMap/Registries/StructureMapRegistry.cs


Add the following lines of code to the Application_Start() method of Global.asax:


            // MvcSiteMapProvider Configuration
#if NET35
    MvcSiteMapProvider.DI.Composer.Compose();
#endif
            XmlSiteMapController.RegisterRoutes(RouteTable.Routes);
            var container = DIConfig.Register();
            MvcSiteMapProviderConfig.Register(container);



You will also need to add the following to the AppSettings section of your root Web.Config file:

<add key="MvcSiteMapProvider_UseExternalDIContainer" value="true"/>


